<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/template-pintereso-bootstrap-jekyll/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/template-pintereso-bootstrap-jekyll/" rel="alternate" type="text/html" /><updated>2023-05-12T00:40:28+08:00</updated><id>http://localhost:4000/template-pintereso-bootstrap-jekyll/feed.xml</id><title type="html">itol.toolkit Gallery</title><subtitle>Collecting visulization plot by iTOL and workflow of itol.toolkit</subtitle><entry><title type="html">Range color block</title><link href="http://localhost:4000/template-pintereso-bootstrap-jekyll/TREE_COLORS_1/" rel="alternate" type="text/html" title="Range color block" /><published>2023-05-06T00:00:00+08:00</published><updated>2023-05-06T00:00:00+08:00</updated><id>http://localhost:4000/template-pintereso-bootstrap-jekyll/TREE_COLORS_1</id><content type="html" xml:base="http://localhost:4000/template-pintereso-bootstrap-jekyll/TREE_COLORS_1/"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>The <code class="language-plaintext highlighter-rouge">TREE_COLORS</code> allows you to set the style of branches at any level. It has five attributes: “range”, “clade”, “branch”, “label”, and “label_background”. While style parameters is simple of <code class="language-plaintext highlighter-rouge">TREE_COLORS</code>, the data parameters are extremely complex. The <code class="language-plaintext highlighter-rouge">Style</code> template belongs to the “Tree structure” class (refer to the <a href="">Class</a> for detail information).</p>

<p>To set the style of a branch or node, users must enter the name of the branch tip or node and the attribute such as color, label, style, and size.The selected branch will then display the new styles as defined by the specified attribute. Although this function provides the most comprehensive templates for modifying tree style, its complexity in data parameters proves to be a great challenge for users.</p>

<p>This section shows how to use itol.toolkit to modify the style. The itol.toolkit significantly reduces the difficulty level for using iTOL by enabling automatic data recognition. Without itol.toolkit, users would have to organize various attribute parameters and their corresponding input data manually. With the itol.toolkit, the entire workflow becomes more cohesive, and users can directly output the template files once they have confirmed which data to use.</p>

<h2 id="regular-flow">Regular flow</h2>
<p>This section uses <a href="https://github.com/TongZhou2017/itol.toolkit/tree/master/inst/extdata/dataset1">dataset 1</a> as an example to show how to draw the line chart. (refer to the  <a href="https://tongzhou2017.github.io/itol.toolkit/articles/Datasets.html">Dataset</a> for detail information)</p>

<h3 id="load-data">Load data</h3>
<p>The first step is to load the <code class="language-plaintext highlighter-rouge">newick</code> format tree file <code class="language-plaintext highlighter-rouge">tree_of_itol_templates.tree</code> and its corresponding metadata <code class="language-plaintext highlighter-rouge">df_frequence</code>.</p>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="n">itol.toolkit</span><span class="p">)</span><span class="w">
</span><span class="n">tree</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">system.file</span><span class="p">(</span><span class="s2">"extdata"</span><span class="p">,</span><span class="w">
                    </span><span class="s2">"tree_of_itol_templates.tree"</span><span class="p">,</span><span class="w">
                    </span><span class="n">package</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"itol.toolkit"</span><span class="p">)</span><span class="w">
</span><span class="n">hub</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">create_hub</span><span class="p">(</span><span class="n">tree</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">tree</span><span class="p">)</span><span class="w">
</span><span class="n">data</span><span class="p">(</span><span class="s2">"template_groups"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>If the user enters all four columns, the program will figure out which is the subclass and which is the color.</p>

<p>We can use the “range” attribute to set color of the tip label area. Unlike the “label_background” attribute, the “range” attribute color action range is consistent in the area of each label. In <code class="language-plaintext highlighter-rouge">unit_7</code>, we only use two columns to show hot use these function. The attribute are fed to the <code class="language-plaintext highlighter-rouge">subtype</code> parameter. Based on the input data, the <code class="language-plaintext highlighter-rouge">create_unit</code> function treat the first column as tip id, and the second columns as the “range” information (whatever the header is). Moreover, the color is also generated by the second column of input data. Also, colors can be defined using the <code class="language-plaintext highlighter-rouge">color</code> parameter. As a result, the program has handle all possible cases automatically, lowering the threshold at which users are preparing for input data.</p>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">unit_7</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">create_unit</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">template_groups</span><span class="p">,</span><span class="w"> 
                      </span><span class="n">key</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"E007_tree_colors_1"</span><span class="p">,</span><span class="w"> 
                      </span><span class="n">type</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"TREE_COLORS"</span><span class="p">,</span><span class="w"> 
                      </span><span class="n">subtype</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"range"</span><span class="p">,</span><span class="w"> 
                      </span><span class="n">tree</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">tree</span><span class="p">)</span><span class="w">
</span><span class="n">write_unit</span><span class="p">(</span><span class="n">unit_7</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>]]></content><author><name></name></author><category term="TREE_COLORS" /><summary type="html"><![CDATA[Introduction The TREE_COLORS allows you to set the style of branches at any level. It has five attributes: “range”, “clade”, “branch”, “label”, and “label_background”. While style parameters is simple of TREE_COLORS, the data parameters are extremely complex. The Style template belongs to the “Tree structure” class (refer to the Class for detail information).]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/template-pintereso-bootstrap-jekyll/assets/images/TREE_COLORS_1.png" /><media:content medium="image" url="http://localhost:4000/template-pintereso-bootstrap-jekyll/assets/images/TREE_COLORS_1.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Branch color at clade</title><link href="http://localhost:4000/template-pintereso-bootstrap-jekyll/TREE_COLORS_2/" rel="alternate" type="text/html" title="Branch color at clade" /><published>2023-05-06T00:00:00+08:00</published><updated>2023-05-06T00:00:00+08:00</updated><id>http://localhost:4000/template-pintereso-bootstrap-jekyll/TREE_COLORS_2</id><content type="html" xml:base="http://localhost:4000/template-pintereso-bootstrap-jekyll/TREE_COLORS_2/"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>The <code class="language-plaintext highlighter-rouge">TREE_COLORS</code> allows you to set the style of branches at any level. It has five attributes: “range”, “clade”, “branch”, “label”, and “label_background”. While style parameters is simple of <code class="language-plaintext highlighter-rouge">TREE_COLORS</code>, the data parameters are extremely complex. The <code class="language-plaintext highlighter-rouge">Style</code> template belongs to the “Tree structure” class (refer to the <a href="">Class</a> for detail information).</p>

<p>To set the style of a branch or node, users must enter the name of the branch tip or node and the attribute such as color, label, style, and size.The selected branch will then display the new styles as defined by the specified attribute. Although this function provides the most comprehensive templates for modifying tree style, its complexity in data parameters proves to be a great challenge for users.</p>

<p>This section shows how to use itol.toolkit to modify the style. The itol.toolkit significantly reduces the difficulty level for using iTOL by enabling automatic data recognition. Without itol.toolkit, users would have to organize various attribute parameters and their corresponding input data manually. With the itol.toolkit, the entire workflow becomes more cohesive, and users can directly output the template files once they have confirmed which data to use.</p>

<h2 id="regular-flow">Regular flow</h2>
<p>This section uses <a href="https://github.com/TongZhou2017/itol.toolkit/tree/master/inst/extdata/dataset1">dataset 1</a> as an example to show how to draw the line chart. (refer to the  <a href="https://tongzhou2017.github.io/itol.toolkit/articles/Datasets.html">Dataset</a> for detail information)</p>

<h3 id="load-data">Load data</h3>
<p>The first step is to load the <code class="language-plaintext highlighter-rouge">newick</code> format tree file <code class="language-plaintext highlighter-rouge">tree_of_itol_templates.tree</code> and its corresponding metadata <code class="language-plaintext highlighter-rouge">df_frequence</code>.</p>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="n">itol.toolkit</span><span class="p">)</span><span class="w">
</span><span class="n">tree</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">system.file</span><span class="p">(</span><span class="s2">"extdata"</span><span class="p">,</span><span class="w">
                    </span><span class="s2">"tree_of_itol_templates.tree"</span><span class="p">,</span><span class="w">
                    </span><span class="n">package</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"itol.toolkit"</span><span class="p">)</span><span class="w">
</span><span class="n">hub</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">create_hub</span><span class="p">(</span><span class="n">tree</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">tree</span><span class="p">)</span><span class="w">
</span><span class="n">data</span><span class="p">(</span><span class="s2">"template_groups"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>If the user enters all four columns, the program will figure out which is the subclass and which is the color.</p>

<p>We can use the “clade” attribute to apply color adjustments to all branches contained in a node . Like <code class="language-plaintext highlighter-rouge">unit_7</code>, we used only 2 columns data  to implement the “branch” attribute in <code class="language-plaintext highlighter-rouge">unit_8</code>. The attribute are fed to the <code class="language-plaintext highlighter-rouge">subtype</code> parameter. The line type is defined by the <code class="language-plaintext highlighter-rouge">line_type</code> parameter, which controls whether the line is a dotted line or not, and here we define the different line types as a set of vectors. The line thickness is defined by the <code class="language-plaintext highlighter-rouge">size_factor</code> parameter.</p>

<p>In <code class="language-plaintext highlighter-rouge">unit_8</code>, five discrete colors are generated according to the second column of input data, which has five groups. Colors can also be defined using the color parameter.</p>
<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_data</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">data.frame</span><span class="p">(</span><span class="n">id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">unique</span><span class="p">(</span><span class="n">template_groups</span><span class="o">$</span><span class="n">group</span><span class="p">),</span><span class="w"> 
                      </span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">unique</span><span class="p">(</span><span class="n">template_groups</span><span class="o">$</span><span class="n">group</span><span class="p">))</span><span class="w">
</span><span class="n">unit_8</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">create_unit</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">df_data</span><span class="p">,</span><span class="w"> 
                      </span><span class="n">key</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"E008_tree_colors_2"</span><span class="p">,</span><span class="w"> 
                      </span><span class="n">type</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"TREE_COLORS"</span><span class="p">,</span><span class="w"> 
                      </span><span class="n">subtype</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"clade"</span><span class="p">,</span><span class="w"> 
                      </span><span class="n">line_type</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="nf">rep</span><span class="p">(</span><span class="s2">"normal"</span><span class="p">,</span><span class="m">4</span><span class="p">),</span><span class="s2">"dashed"</span><span class="p">),</span><span class="w">
                      </span><span class="n">size_factor</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">5</span><span class="p">,</span><span class="w"> 
                      </span><span class="n">tree</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">tree</span><span class="p">)</span><span class="w">
</span><span class="n">write_unit</span><span class="p">(</span><span class="n">unit_8</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>]]></content><author><name></name></author><category term="TREE_COLORS" /><summary type="html"><![CDATA[Introduction The TREE_COLORS allows you to set the style of branches at any level. It has five attributes: “range”, “clade”, “branch”, “label”, and “label_background”. While style parameters is simple of TREE_COLORS, the data parameters are extremely complex. The Style template belongs to the “Tree structure” class (refer to the Class for detail information).]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/template-pintereso-bootstrap-jekyll/assets/images/TREE_COLORS_2.png" /><media:content medium="image" url="http://localhost:4000/template-pintereso-bootstrap-jekyll/assets/images/TREE_COLORS_2.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Branch color at branch</title><link href="http://localhost:4000/template-pintereso-bootstrap-jekyll/TREE_COLORS_3/" rel="alternate" type="text/html" title="Branch color at branch" /><published>2023-05-06T00:00:00+08:00</published><updated>2023-05-06T00:00:00+08:00</updated><id>http://localhost:4000/template-pintereso-bootstrap-jekyll/TREE_COLORS_3</id><content type="html" xml:base="http://localhost:4000/template-pintereso-bootstrap-jekyll/TREE_COLORS_3/"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>The <code class="language-plaintext highlighter-rouge">TREE_COLORS</code> allows you to set the style of branches at any level. It has five attributes: “range”, “clade”, “branch”, “label”, and “label_background”. While style parameters is simple of <code class="language-plaintext highlighter-rouge">TREE_COLORS</code>, the data parameters are extremely complex. The <code class="language-plaintext highlighter-rouge">Style</code> template belongs to the “Tree structure” class (refer to the <a href="">Class</a> for detail information).</p>

<p>To set the style of a branch or node, users must enter the name of the branch tip or node and the attribute such as color, label, style, and size.The selected branch will then display the new styles as defined by the specified attribute. Although this function provides the most comprehensive templates for modifying tree style, its complexity in data parameters proves to be a great challenge for users.</p>

<p>This section shows how to use itol.toolkit to modify the style. The itol.toolkit significantly reduces the difficulty level for using iTOL by enabling automatic data recognition. Without itol.toolkit, users would have to organize various attribute parameters and their corresponding input data manually. With the itol.toolkit, the entire workflow becomes more cohesive, and users can directly output the template files once they have confirmed which data to use.</p>

<h2 id="regular-flow">Regular flow</h2>
<p>This section uses <a href="https://github.com/TongZhou2017/itol.toolkit/tree/master/inst/extdata/dataset1">dataset 1</a> as an example to show how to draw the line chart. (refer to the  <a href="https://tongzhou2017.github.io/itol.toolkit/articles/Datasets.html">Dataset</a> for detail information)</p>

<h3 id="load-data">Load data</h3>
<p>The first step is to load the <code class="language-plaintext highlighter-rouge">newick</code> format tree file <code class="language-plaintext highlighter-rouge">tree_of_itol_templates.tree</code> and its corresponding metadata <code class="language-plaintext highlighter-rouge">df_frequence</code>.</p>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="n">itol.toolkit</span><span class="p">)</span><span class="w">
</span><span class="n">tree</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">system.file</span><span class="p">(</span><span class="s2">"extdata"</span><span class="p">,</span><span class="w">
                    </span><span class="s2">"tree_of_itol_templates.tree"</span><span class="p">,</span><span class="w">
                    </span><span class="n">package</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"itol.toolkit"</span><span class="p">)</span><span class="w">
</span><span class="n">hub</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">create_hub</span><span class="p">(</span><span class="n">tree</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">tree</span><span class="p">)</span><span class="w">
</span><span class="n">data</span><span class="p">(</span><span class="s2">"template_groups"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>If the user enters all four columns, the program will figure out which is the subclass and which is the color.</p>

<p>We can use the “branch” attribute to adjust color of the node or tip like “clade” attribute. However, “branch” attribute does not broadcast these settings to its offspring branches. See <code class="language-plaintext highlighter-rouge">unit_9</code></p>
<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">unit_9</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">create_unit</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">df_data</span><span class="p">,</span><span class="w"> 
                      </span><span class="n">key</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"E009_tree_colors_3"</span><span class="p">,</span><span class="w"> 
                      </span><span class="n">type</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"TREE_COLORS"</span><span class="p">,</span><span class="w"> 
                      </span><span class="n">subtype</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"branch"</span><span class="p">,</span><span class="w"> 
                      </span><span class="n">line_type</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="nf">rep</span><span class="p">(</span><span class="s2">"normal"</span><span class="p">,</span><span class="m">4</span><span class="p">),</span><span class="s2">"dashed"</span><span class="p">),</span><span class="w">
                      </span><span class="n">size_factor</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">5</span><span class="p">,</span><span class="w"> 
                      </span><span class="n">tree</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">tree</span><span class="p">)</span><span class="w">
</span><span class="n">write_unit</span><span class="p">(</span><span class="n">unit_9</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>]]></content><author><name></name></author><category term="TREE_COLORS" /><summary type="html"><![CDATA[Introduction The TREE_COLORS allows you to set the style of branches at any level. It has five attributes: “range”, “clade”, “branch”, “label”, and “label_background”. While style parameters is simple of TREE_COLORS, the data parameters are extremely complex. The Style template belongs to the “Tree structure” class (refer to the Class for detail information).]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/template-pintereso-bootstrap-jekyll/assets/images/TREE_COLORS_3.png" /><media:content medium="image" url="http://localhost:4000/template-pintereso-bootstrap-jekyll/assets/images/TREE_COLORS_3.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Lable color</title><link href="http://localhost:4000/template-pintereso-bootstrap-jekyll/TREE_COLORS_4/" rel="alternate" type="text/html" title="Lable color" /><published>2023-05-06T00:00:00+08:00</published><updated>2023-05-06T00:00:00+08:00</updated><id>http://localhost:4000/template-pintereso-bootstrap-jekyll/TREE_COLORS_4</id><content type="html" xml:base="http://localhost:4000/template-pintereso-bootstrap-jekyll/TREE_COLORS_4/"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>The <code class="language-plaintext highlighter-rouge">TREE_COLORS</code> allows you to set the style of branches at any level. It has five attributes: “range”, “clade”, “branch”, “label”, and “label_background”. While style parameters is simple of <code class="language-plaintext highlighter-rouge">TREE_COLORS</code>, the data parameters are extremely complex. The <code class="language-plaintext highlighter-rouge">Style</code> template belongs to the “Tree structure” class (refer to the <a href="">Class</a> for detail information).</p>

<p>To set the style of a branch or node, users must enter the name of the branch tip or node and the attribute such as color, label, style, and size.The selected branch will then display the new styles as defined by the specified attribute. Although this function provides the most comprehensive templates for modifying tree style, its complexity in data parameters proves to be a great challenge for users.</p>

<p>This section shows how to use itol.toolkit to modify the style. The itol.toolkit significantly reduces the difficulty level for using iTOL by enabling automatic data recognition. Without itol.toolkit, users would have to organize various attribute parameters and their corresponding input data manually. With the itol.toolkit, the entire workflow becomes more cohesive, and users can directly output the template files once they have confirmed which data to use.</p>

<h2 id="regular-flow">Regular flow</h2>
<p>This section uses <a href="https://github.com/TongZhou2017/itol.toolkit/tree/master/inst/extdata/dataset1">dataset 1</a> as an example to show how to draw the line chart. (refer to the  <a href="https://tongzhou2017.github.io/itol.toolkit/articles/Datasets.html">Dataset</a> for detail information)</p>

<h3 id="load-data">Load data</h3>
<p>The first step is to load the <code class="language-plaintext highlighter-rouge">newick</code> format tree file <code class="language-plaintext highlighter-rouge">tree_of_itol_templates.tree</code> and its corresponding metadata <code class="language-plaintext highlighter-rouge">df_frequence</code>.</p>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="n">itol.toolkit</span><span class="p">)</span><span class="w">
</span><span class="n">tree</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">system.file</span><span class="p">(</span><span class="s2">"extdata"</span><span class="p">,</span><span class="w">
                    </span><span class="s2">"tree_of_itol_templates.tree"</span><span class="p">,</span><span class="w">
                    </span><span class="n">package</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"itol.toolkit"</span><span class="p">)</span><span class="w">
</span><span class="n">hub</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">create_hub</span><span class="p">(</span><span class="n">tree</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">tree</span><span class="p">)</span><span class="w">
</span><span class="n">data</span><span class="p">(</span><span class="s2">"template_groups"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>If the user enters all four columns, the program will figure out which is the subclass and which is the color.</p>

<p>We can use “label” attribute to adjust colors and font styles at the branch level. We  also used only 2 columns data  to implement the “branch” attribute in  <code class="language-plaintext highlighter-rouge">unit_10</code>. The font type is defined by the <code class="language-plaintext highlighter-rouge">font_type parameter</code>, which controls whether the lines are bold or italic; The font size is defined by the <code class="language-plaintext highlighter-rouge">size_factor</code> parameter.</p>
<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">unit_10</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">create_unit</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">template_groups</span><span class="p">,</span><span class="w">
                       </span><span class="n">key</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"E010_tree_colors_4"</span><span class="p">,</span><span class="w"> 
                       </span><span class="n">type</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"TREE_COLORS"</span><span class="p">,</span><span class="w"> 
                       </span><span class="n">subtype</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"label"</span><span class="p">,</span><span class="w"> 
                       </span><span class="n">font_type</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"bold-italic"</span><span class="p">,</span><span class="w">
                       </span><span class="n">size_factor</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">2</span><span class="p">,</span><span class="w"> 
                       </span><span class="n">tree</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">tree</span><span class="p">)</span><span class="w">
</span><span class="n">write_unit</span><span class="p">(</span><span class="n">unit_10</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>]]></content><author><name></name></author><category term="TREE_COLORS" /><summary type="html"><![CDATA[Introduction The TREE_COLORS allows you to set the style of branches at any level. It has five attributes: “range”, “clade”, “branch”, “label”, and “label_background”. While style parameters is simple of TREE_COLORS, the data parameters are extremely complex. The Style template belongs to the “Tree structure” class (refer to the Class for detail information).]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/template-pintereso-bootstrap-jekyll/assets/images/TREE_COLORS_4.png" /><media:content medium="image" url="http://localhost:4000/template-pintereso-bootstrap-jekyll/assets/images/TREE_COLORS_4.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Lable color by node id</title><link href="http://localhost:4000/template-pintereso-bootstrap-jekyll/DATASET_STYLE_4/" rel="alternate" type="text/html" title="Lable color by node id" /><published>2023-05-06T00:00:00+08:00</published><updated>2023-05-06T00:00:00+08:00</updated><id>http://localhost:4000/template-pintereso-bootstrap-jekyll/DATASET_STYLE_4</id><content type="html" xml:base="http://localhost:4000/template-pintereso-bootstrap-jekyll/DATASET_STYLE_4/"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>The function of the <code class="language-plaintext highlighter-rouge">DATASET_STYLE</code> template is to adjust the style of branches at any level. It includes two subclasses: branch and label. The function parameter is simple, whereas the input data is more complex. The <code class="language-plaintext highlighter-rouge">DATASET_STYLE</code> template belongs to the “Style” class (refer to the <a href="">Class</a> for detail information).</p>

<p>Typically, users define a branch or node style by entering the branch or node name, subclass function name, action location, color, font or line style, and size. The selected branch will be displayed in new style changes specified by the sub function. This function has a high level of integration, and its data parameters are relatively complex, posing a great challenge to users.</p>

<h2 id="adjust-style">Adjust style</h2>
<p>This section uses <a href="https://github.com/TongZhou2017/itol.toolkit/tree/master/inst/extdata/dataset1">dataset 1</a> as an example to show how to adjust the styles. (refer to the  <a href="https://tongzhou2017.github.io/itol.toolkit/articles/Datasets.html">Dataset</a> for detail information)</p>

<h3 id="load-data">Load data</h3>
<p>The first step is to load the <code class="language-plaintext highlighter-rouge">newick</code> format tree file <code class="language-plaintext highlighter-rouge">tree_of_itol_templates.tree</code> and its corresponding metadata <code class="language-plaintext highlighter-rouge">df_frequence</code>.</p>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="n">itol.toolkit</span><span class="p">)</span><span class="w">
</span><span class="n">tree</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">system.file</span><span class="p">(</span><span class="s2">"extdata"</span><span class="p">,</span><span class="w">
                    </span><span class="s2">"tree_of_itol_templates.tree"</span><span class="p">,</span><span class="w">
                    </span><span class="n">package</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"itol.toolkit"</span><span class="p">)</span><span class="w">
</span><span class="n">data</span><span class="p">(</span><span class="s2">"template_groups"</span><span class="p">)</span><span class="w">
</span><span class="n">df_data</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">data.frame</span><span class="p">(</span><span class="n">id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">unique</span><span class="p">(</span><span class="n">template_groups</span><span class="o">$</span><span class="n">group</span><span class="p">),</span><span class="w">
                      </span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">unique</span><span class="p">(</span><span class="n">template_groups</span><span class="o">$</span><span class="n">group</span><span class="p">))</span><span class="w">
</span></code></pre></div></div>

<p>We can use the label subtype function to adjust the color of the labels to which the branch area belongs. In E015, we only used 2 columns of information to adjust the style of all labels. For functions that cannot be implemented by E014, it is necessary to define the position as the entire branch in <code class="language-plaintext highlighter-rouge">DATASET_STYLE</code> in order to use the node id to control large area labels.</p>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">unit_15</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">create_unit</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">df_data</span><span class="p">,</span><span class="w">
                       </span><span class="n">key</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"E015_style_4"</span><span class="p">,</span><span class="w">
                       </span><span class="n">type</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"DATASET_STYLE"</span><span class="p">,</span><span class="w">
                       </span><span class="n">subtype</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"label"</span><span class="p">,</span><span class="w">
                       </span><span class="n">position</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"clade"</span><span class="p">,</span><span class="w">
                       </span><span class="n">size_factor</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1.5</span><span class="p">,</span><span class="w">
                       </span><span class="n">tree</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">tree</span><span class="p">)</span><span class="w">
</span><span class="n">write_unit</span><span class="p">(</span><span class="n">unit_15</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>]]></content><author><name></name></author><category term="DATASET_STYLE" /><summary type="html"><![CDATA[Introduction The function of the DATASET_STYLE template is to adjust the style of branches at any level. It includes two subclasses: branch and label. The function parameter is simple, whereas the input data is more complex. The DATASET_STYLE template belongs to the “Style” class (refer to the Class for detail information).]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/template-pintereso-bootstrap-jekyll/assets/images/DATASET_STYLE_4.png" /><media:content medium="image" url="http://localhost:4000/template-pintereso-bootstrap-jekyll/assets/images/DATASET_STYLE_4.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Collapse by range id</title><link href="http://localhost:4000/template-pintereso-bootstrap-jekyll/COLLAPSE_1/" rel="alternate" type="text/html" title="Collapse by range id" /><published>2023-05-06T00:00:00+08:00</published><updated>2023-05-06T00:00:00+08:00</updated><id>http://localhost:4000/template-pintereso-bootstrap-jekyll/COLLAPSE_1</id><content type="html" xml:base="http://localhost:4000/template-pintereso-bootstrap-jekyll/COLLAPSE_1/"><![CDATA[<h2 id="introduction">Introduction</h2>

<p><code class="language-plaintext highlighter-rouge">COLLAPSE</code> template are used to collapse branches.</p>

<p>Typically, The user merges branches A and B by folding them at their most recent common ancestor (MRCA). However, it is normally hard for users to declare the MRCA node directly. The node name is usually generated automatically by software rather than specified by the user when building the phylogenetic tree. Some programs do not even generate the node name.</p>

<p>This section has taken these complicated cases into account, and provide the corresponding solution, so that users can easily prepare the input data.</p>

<h2 id="range-id">Range ID</h2>

<p>This basic grammar for range id is written as: <code class="language-plaintext highlighter-rouge">branch_A|branch_B</code>.</p>

<p>This section provides an example of how to collapse branches using <a href="https://github.com/TongZhou2017/itol.toolkit/tree/master/inst/extdata/dataset1">dataset 1</a> (refer to the <a href="https://tongzhou2017.github.io/itol.toolkit/articles/Datasets.html">Dataset</a> for detail information) document for detailed information). Users can download the data locally from the provided link above. The files are read using a relative path in this document, so please adjust the path based on actual situation.</p>

<p>The first step is to load the <code class="language-plaintext highlighter-rouge">newick</code> format tree file <code class="language-plaintext highlighter-rouge">tree_of_itol_templates.tree</code> and its corresponding metadata <code class="language-plaintext highlighter-rouge">template_groups</code>.</p>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="n">itol.toolkit</span><span class="p">)</span><span class="w">
</span><span class="n">tree</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">system.file</span><span class="p">(</span><span class="s2">"extdata"</span><span class="p">,</span><span class="w">
                    </span><span class="s2">"tree_of_itol_templates.tree"</span><span class="p">,</span><span class="w">
                    </span><span class="n">package</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"itol.toolkit"</span><span class="p">)</span><span class="w">
</span><span class="n">data</span><span class="p">(</span><span class="s2">"template_groups"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>Suppose that the user wants to collapse <code class="language-plaintext highlighter-rouge">DATASET_SIMPLEBAR</code> and <code class="language-plaintext highlighter-rouge">DATASET_MULTIBAR</code> into one branch; <code class="language-plaintext highlighter-rouge">DATASET_TEXT</code> and <code class="language-plaintext highlighter-rouge">LABELS</code> into another branch;<code class="language-plaintext highlighter-rouge">DATASET_ALIGNMENT</code>, <code class="language-plaintext highlighter-rouge">DATASET_CONNECTIONS</code>, <code class="language-plaintext highlighter-rouge">DATASET_IMAGE</code> and <code class="language-plaintext highlighter-rouge">POPUP_INFO</code> which belong to advanced visualization into one branch:</p>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">range_ids</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"DATASET_SIMPLEBAR|DATASET_MULTIBAR"</span><span class="p">,</span><span class="w">
               </span><span class="s2">"DATASET_TEXT|LABELS"</span><span class="p">,</span><span class="w">
               </span><span class="s2">"DATASET_CONNECTIONS|POPUP_INFO"</span><span class="p">)</span><span class="w">
</span><span class="n">unit_1</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">create_unit</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">range_ids</span><span class="p">,</span><span class="w"> 
                      </span><span class="n">key</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"E001_collapse_1"</span><span class="p">,</span><span class="w"> 
                      </span><span class="n">type</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"COLLAPSE"</span><span class="p">,</span><span class="w"> 
                      </span><span class="n">tree</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">tree</span><span class="p">)</span><span class="w">
</span><span class="n">write_unit</span><span class="p">(</span><span class="n">unit_1</span><span class="p">,</span><span class="w">
           </span><span class="n">paste0</span><span class="p">(</span><span class="n">getwd</span><span class="p">(),</span><span class="s2">"/E001_collapse_1.txt"</span><span class="p">))</span><span class="w">
</span></code></pre></div></div>

<p>While the first two sets of folded branches are relatively simple to define because no other branches exist between them, the third set of folded branches is slightly complex, requiring the user to select the two branches with the longest spacing among the four to accurately describe the extent to be folded. Writing the code as <code class="language-plaintext highlighter-rouge">DATASET_ALIGNMENT | POPUP_INFO</code> may result in the omission of the <code class="language-plaintext highlighter-rouge">DATASET_CONNECTIONS</code> branch, because the branch does not belong to MCRA of <code class="language-plaintext highlighter-rouge">DATASET_ALIGNMENT</code> and <code class="language-plaintext highlighter-rouge">POPUP_INFO</code>.</p>

<p>Because the process of defining branches is very cumbersome and requires manual judgment, this function is not used frequently in the 23 templates in iTOL v6.</p>]]></content><author><name></name></author><category term="COLLAPSE" /><summary type="html"><![CDATA[Introduction]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/template-pintereso-bootstrap-jekyll/assets/images/COLLAPSE_1.png" /><media:content medium="image" url="http://localhost:4000/template-pintereso-bootstrap-jekyll/assets/images/COLLAPSE_1.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Collapse by node id</title><link href="http://localhost:4000/template-pintereso-bootstrap-jekyll/COLLAPSE_2/" rel="alternate" type="text/html" title="Collapse by node id" /><published>2023-05-06T00:00:00+08:00</published><updated>2023-05-06T00:00:00+08:00</updated><id>http://localhost:4000/template-pintereso-bootstrap-jekyll/COLLAPSE_2</id><content type="html" xml:base="http://localhost:4000/template-pintereso-bootstrap-jekyll/COLLAPSE_2/"><![CDATA[<h2 id="introduction">Introduction</h2>

<p><code class="language-plaintext highlighter-rouge">COLLAPSE</code> template are used to collapse branches.</p>

<p>Typically, The user merges branches A and B by folding them at their most recent common ancestor (MRCA). However, it is normally hard for users to declare the MRCA node directly. The node name is usually generated automatically by software rather than specified by the user when building the phylogenetic tree. Some programs do not even generate the node name.</p>

<p>This section has taken these complicated cases into account, and provide the corresponding solution, so that users can easily prepare the input data.</p>

<h2 id="node-id">Node ID</h2>

<p>Although we used a tip label in the above example, using node names directly is more convenient if it is available. Thus, the <code class="language-plaintext highlighter-rouge">itol.toolkit</code> also enable you to define the collapsed branch using the node name directly .</p>

<p>The tree provided by <code class="language-plaintext highlighter-rouge">itol.toolkit</code> <a href="https://github.com/TongZhou2017/itol.toolkit/blob/master/inst/extdata/dataset1/itol_templates.tree">dataset 1</a> including the node labels:</p>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ape</span><span class="o">::</span><span class="n">read.tree</span><span class="p">(</span><span class="n">tree</span><span class="p">)</span><span class="w">
</span><span class="c1"># Phylogenetic tree with 23 tips and 22 internal nodes.</span><span class="w">
</span><span class="c1">#</span><span class="w">
</span><span class="c1"># Tip labels:</span><span class="w">
</span><span class="c1">#   SPACING, COLLAPSE, PRUNE, TREE_COLORS, DATASET_STYLE, DATASET_CONNECTIONS, ...</span><span class="w">
</span><span class="c1"># Node labels:</span><span class="w">
</span><span class="c1">#   I1, I2, tree_sturcture, I4, theme_style, I6, ...</span><span class="w">
</span><span class="c1"># </span><span class="w">
</span><span class="c1"># Rooted; includes branch lengths.</span><span class="w">
</span></code></pre></div></div>

<p>Therefore, you could specify the group you want to merge directly.</p>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">group_names</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">unique</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="s2">"tree_sturcture"</span><span class="p">,</span><span class="w"> </span><span class="s2">"theme_style"</span><span class="p">,</span><span class="w"> </span><span class="s2">"text"</span><span class="p">,</span><span class="w"> </span><span class="s2">"basic_plot"</span><span class="p">))</span><span class="w">
</span><span class="n">unit_2</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">create_unit</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">group_names</span><span class="p">,</span><span class="w"> 
                      </span><span class="n">key</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"E002_collapse_2"</span><span class="p">,</span><span class="w"> 
                      </span><span class="n">type</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"COLLAPSE"</span><span class="p">,</span><span class="w"> 
                      </span><span class="n">tree</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">tree</span><span class="p">)</span><span class="w">
</span><span class="n">write_unit</span><span class="p">(</span><span class="n">unit_2</span><span class="p">,</span><span class="w">
           </span><span class="n">paste0</span><span class="p">(</span><span class="n">getwd</span><span class="p">(),</span><span class="s2">"/E002_collapse_2.txt"</span><span class="p">))</span><span class="w">
</span></code></pre></div></div>

<p>If you have questions about how to upload results files from iTOL toolkit for interactive visualization on iTOL, please refer to the <a href="https://tongzhou2017.github.io/itol.toolkit/articles/Operation.html">Operation</a> document for step-by-step guidance.</p>]]></content><author><name></name></author><category term="COLLAPSE" /><summary type="html"><![CDATA[Introduction]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/template-pintereso-bootstrap-jekyll/assets/images/COLLAPSE_2.png" /><media:content medium="image" url="http://localhost:4000/template-pintereso-bootstrap-jekyll/assets/images/COLLAPSE_2.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Branch color at clade</title><link href="http://localhost:4000/template-pintereso-bootstrap-jekyll/DATASET_STYLE_1/" rel="alternate" type="text/html" title="Branch color at clade" /><published>2023-05-06T00:00:00+08:00</published><updated>2023-05-06T00:00:00+08:00</updated><id>http://localhost:4000/template-pintereso-bootstrap-jekyll/DATASET_STYLE_1</id><content type="html" xml:base="http://localhost:4000/template-pintereso-bootstrap-jekyll/DATASET_STYLE_1/"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>The function of the <code class="language-plaintext highlighter-rouge">DATASET_STYLE</code> template is to adjust the style of branches at any level. It includes two subclasses: branch and label. The function parameter is simple, whereas the input data is more complex. The <code class="language-plaintext highlighter-rouge">DATASET_STYLE</code> template belongs to the “Style” class (refer to the <a href="">Class</a> for detail information).</p>

<p>Typically, users define a branch or node style by entering the branch or node name, subclass function name, action location, color, font or line style, and size. The selected branch will be displayed in new style changes specified by the sub function. This function has a high level of integration, and its data parameters are relatively complex, posing a great challenge to users.</p>

<h2 id="adjust-style">Adjust style</h2>
<p>This section uses <a href="https://github.com/TongZhou2017/itol.toolkit/tree/master/inst/extdata/dataset1">dataset 1</a> as an example to show how to adjust the styles. (refer to the  <a href="https://tongzhou2017.github.io/itol.toolkit/articles/Datasets.html">Dataset</a> for detail information)</p>

<h3 id="load-data">Load data</h3>
<p>The first step is to load the <code class="language-plaintext highlighter-rouge">newick</code> format tree file <code class="language-plaintext highlighter-rouge">tree_of_itol_templates.tree</code> and its corresponding metadata <code class="language-plaintext highlighter-rouge">df_frequence</code>.</p>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="n">itol.toolkit</span><span class="p">)</span><span class="w">
</span><span class="n">tree</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">system.file</span><span class="p">(</span><span class="s2">"extdata"</span><span class="p">,</span><span class="w">
                    </span><span class="s2">"tree_of_itol_templates.tree"</span><span class="p">,</span><span class="w">
                    </span><span class="n">package</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"itol.toolkit"</span><span class="p">)</span><span class="w">
</span><span class="n">data</span><span class="p">(</span><span class="s2">"template_groups"</span><span class="p">)</span><span class="w">
</span><span class="n">df_data</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">data.frame</span><span class="p">(</span><span class="n">id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">unique</span><span class="p">(</span><span class="n">template_groups</span><span class="o">$</span><span class="n">group</span><span class="p">),</span><span class="w">
                      </span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">unique</span><span class="p">(</span><span class="n">template_groups</span><span class="o">$</span><span class="n">group</span><span class="p">))</span><span class="w">
</span></code></pre></div></div>

<p>We can use the branch subtype function to adjust the color of the entire branch area. In E012, we only used two columns of information to implement the function. For other data, subtype information is passed through the “subtype” parameter, position information is passed by the “position” parameter, line thickness is passed by the “size_factor” parameter. When the line type is not explicitly defined, the default is normal line type. Also, colors are generated from the second column of input data as they are not explicitly specified. If the input data contains all six columns of data, the program will also automatically determine which column is subtype, which is color, and so on. In addition, colors can also be defined through the “color” parameter. Therefore, for various possible situations, the program has automated processing methods, reducing the threshold for users to prepare to input data.</p>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">unit_12</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">create_unit</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">df_data</span><span class="p">,</span><span class="w"> 
                       </span><span class="n">key</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"E012_style_1"</span><span class="p">,</span><span class="w">
                       </span><span class="n">type</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"DATASET_STYLE"</span><span class="p">,</span><span class="w"> 
                       </span><span class="n">subtype</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"branch"</span><span class="p">,</span><span class="w">
                       </span><span class="n">position</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"clade"</span><span class="p">,</span><span class="w">
                       </span><span class="n">size_factor</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">5</span><span class="p">,</span><span class="w">
                       </span><span class="n">tree</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">tree</span><span class="p">)</span><span class="w">
</span><span class="n">write_unit</span><span class="p">(</span><span class="n">unit_12</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>]]></content><author><name></name></author><category term="DATASET_STYLE" /><summary type="html"><![CDATA[Introduction The function of the DATASET_STYLE template is to adjust the style of branches at any level. It includes two subclasses: branch and label. The function parameter is simple, whereas the input data is more complex. The DATASET_STYLE template belongs to the “Style” class (refer to the Class for detail information).]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/template-pintereso-bootstrap-jekyll/assets/images/DATASET_STYLE_1.png" /><media:content medium="image" url="http://localhost:4000/template-pintereso-bootstrap-jekyll/assets/images/DATASET_STYLE_1.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Branch color at branch</title><link href="http://localhost:4000/template-pintereso-bootstrap-jekyll/DATASET_STYLE_2/" rel="alternate" type="text/html" title="Branch color at branch" /><published>2023-05-06T00:00:00+08:00</published><updated>2023-05-06T00:00:00+08:00</updated><id>http://localhost:4000/template-pintereso-bootstrap-jekyll/DATASET_STYLE_2</id><content type="html" xml:base="http://localhost:4000/template-pintereso-bootstrap-jekyll/DATASET_STYLE_2/"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>The function of the <code class="language-plaintext highlighter-rouge">DATASET_STYLE</code> template is to adjust the style of branches at any level. It includes two subclasses: branch and label. The function parameter is simple, whereas the input data is more complex. The <code class="language-plaintext highlighter-rouge">DATASET_STYLE</code> template belongs to the “Style” class (refer to the <a href="">Class</a> for detail information).</p>

<p>Typically, users define a branch or node style by entering the branch or node name, subclass function name, action location, color, font or line style, and size. The selected branch will be displayed in new style changes specified by the sub function. This function has a high level of integration, and its data parameters are relatively complex, posing a great challenge to users.</p>

<h2 id="adjust-style">Adjust style</h2>
<p>This section uses <a href="https://github.com/TongZhou2017/itol.toolkit/tree/master/inst/extdata/dataset1">dataset 1</a> as an example to show how to adjust the styles. (refer to the  <a href="https://tongzhou2017.github.io/itol.toolkit/articles/Datasets.html">Dataset</a> for detail information)</p>

<h3 id="load-data">Load data</h3>
<p>The first step is to load the <code class="language-plaintext highlighter-rouge">newick</code> format tree file <code class="language-plaintext highlighter-rouge">tree_of_itol_templates.tree</code> and its corresponding metadata <code class="language-plaintext highlighter-rouge">df_frequence</code>.</p>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="n">itol.toolkit</span><span class="p">)</span><span class="w">
</span><span class="n">tree</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">system.file</span><span class="p">(</span><span class="s2">"extdata"</span><span class="p">,</span><span class="w">
                    </span><span class="s2">"tree_of_itol_templates.tree"</span><span class="p">,</span><span class="w">
                    </span><span class="n">package</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"itol.toolkit"</span><span class="p">)</span><span class="w">
</span><span class="n">data</span><span class="p">(</span><span class="s2">"template_groups"</span><span class="p">)</span><span class="w">
</span><span class="n">df_data</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">data.frame</span><span class="p">(</span><span class="n">id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">unique</span><span class="p">(</span><span class="n">template_groups</span><span class="o">$</span><span class="n">group</span><span class="p">),</span><span class="w">
                      </span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">unique</span><span class="p">(</span><span class="n">template_groups</span><span class="o">$</span><span class="n">group</span><span class="p">))</span><span class="w">
</span></code></pre></div></div>

<p>We can use the “branch” subtype function to adjust the color of the node area. In E013, we only used two columns of information to implement the function. There is no location defined here, and the program defaults to the node location. Other parameters are consistent with E012. If you simplify it further, when the line thickness is 1, the size parameter can also be omitted and not written.</p>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">unit_13</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">create_unit</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">df_data</span><span class="p">,</span><span class="w"> 
                       </span><span class="n">key</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"E013_style_2"</span><span class="p">,</span><span class="w"> 
                       </span><span class="n">type</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"DATASET_STYLE"</span><span class="p">,</span><span class="w"> 
                       </span><span class="n">subtype</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"branch"</span><span class="p">,</span><span class="w">
                       </span><span class="n">size_factor</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">5</span><span class="p">,</span><span class="w">
                       </span><span class="n">tree</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">tree</span><span class="p">)</span><span class="w">
</span><span class="n">write_unit</span><span class="p">(</span><span class="n">unit_13</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>]]></content><author><name></name></author><category term="DATASET_STYLE" /><summary type="html"><![CDATA[Introduction The function of the DATASET_STYLE template is to adjust the style of branches at any level. It includes two subclasses: branch and label. The function parameter is simple, whereas the input data is more complex. The DATASET_STYLE template belongs to the “Style” class (refer to the Class for detail information).]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/template-pintereso-bootstrap-jekyll/assets/images/DATASET_STYLE_2.png" /><media:content medium="image" url="http://localhost:4000/template-pintereso-bootstrap-jekyll/assets/images/DATASET_STYLE_2.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Lable color by tip id</title><link href="http://localhost:4000/template-pintereso-bootstrap-jekyll/DATASET_STYLE_3/" rel="alternate" type="text/html" title="Lable color by tip id" /><published>2023-05-06T00:00:00+08:00</published><updated>2023-05-06T00:00:00+08:00</updated><id>http://localhost:4000/template-pintereso-bootstrap-jekyll/DATASET_STYLE_3</id><content type="html" xml:base="http://localhost:4000/template-pintereso-bootstrap-jekyll/DATASET_STYLE_3/"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>The function of the <code class="language-plaintext highlighter-rouge">DATASET_STYLE</code> template is to adjust the style of branches at any level. It includes two subclasses: branch and label. The function parameter is simple, whereas the input data is more complex. The <code class="language-plaintext highlighter-rouge">DATASET_STYLE</code> template belongs to the “Style” class (refer to the <a href="">Class</a> for detail information).</p>

<p>Typically, users define a branch or node style by entering the branch or node name, subclass function name, action location, color, font or line style, and size. The selected branch will be displayed in new style changes specified by the sub function. This function has a high level of integration, and its data parameters are relatively complex, posing a great challenge to users.</p>

<h2 id="adjust-style">Adjust style</h2>
<p>This section uses <a href="https://github.com/TongZhou2017/itol.toolkit/tree/master/inst/extdata/dataset1">dataset 1</a> as an example to show how to adjust the styles. (refer to the  <a href="https://tongzhou2017.github.io/itol.toolkit/articles/Datasets.html">Dataset</a> for detail information)</p>

<h3 id="load-data">Load data</h3>
<p>The first step is to load the <code class="language-plaintext highlighter-rouge">newick</code> format tree file <code class="language-plaintext highlighter-rouge">tree_of_itol_templates.tree</code> and its corresponding metadata <code class="language-plaintext highlighter-rouge">df_frequence</code>.</p>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="n">itol.toolkit</span><span class="p">)</span><span class="w">
</span><span class="n">tree</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">system.file</span><span class="p">(</span><span class="s2">"extdata"</span><span class="p">,</span><span class="w">
                    </span><span class="s2">"tree_of_itol_templates.tree"</span><span class="p">,</span><span class="w">
                    </span><span class="n">package</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"itol.toolkit"</span><span class="p">)</span><span class="w">
</span><span class="n">data</span><span class="p">(</span><span class="s2">"template_groups"</span><span class="p">)</span><span class="w">
</span><span class="n">df_data</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">data.frame</span><span class="p">(</span><span class="n">id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">unique</span><span class="p">(</span><span class="n">template_groups</span><span class="o">$</span><span class="n">group</span><span class="p">),</span><span class="w">
                      </span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">unique</span><span class="p">(</span><span class="n">template_groups</span><span class="o">$</span><span class="n">group</span><span class="p">))</span><span class="w">
</span></code></pre></div></div>

<p>We can use the label subtype function to adjust the color of the labels to which the node area belongs. In E014, we only used 2 columns of information to adjust the style of some labels. Note that if the active location is a node area, the id column of the label subtype function can only use branch ids, which is a limitation imposed by iTOL itself.</p>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">unit_14</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">create_unit</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">template_groups</span><span class="p">[</span><span class="m">1</span><span class="o">:</span><span class="m">10</span><span class="p">,],</span><span class="w"> 
                       </span><span class="n">key</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"E014_style_3"</span><span class="p">,</span><span class="w">
                       </span><span class="n">type</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"DATASET_STYLE"</span><span class="p">,</span><span class="w"> 
                       </span><span class="n">subtype</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"label"</span><span class="p">,</span><span class="w">
                       </span><span class="n">position</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"node"</span><span class="p">,</span><span class="w">
                       </span><span class="n">size_factor</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1.5</span><span class="p">,</span><span class="w">
                       </span><span class="n">tree</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">tree</span><span class="p">)</span><span class="w">
</span><span class="n">write_unit</span><span class="p">(</span><span class="n">unit_14</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>]]></content><author><name></name></author><category term="DATASET_STYLE" /><summary type="html"><![CDATA[Introduction The function of the DATASET_STYLE template is to adjust the style of branches at any level. It includes two subclasses: branch and label. The function parameter is simple, whereas the input data is more complex. The DATASET_STYLE template belongs to the “Style” class (refer to the Class for detail information).]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/template-pintereso-bootstrap-jekyll/assets/images/DATASET_STYLE_3.png" /><media:content medium="image" url="http://localhost:4000/template-pintereso-bootstrap-jekyll/assets/images/DATASET_STYLE_3.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>